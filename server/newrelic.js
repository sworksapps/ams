'use strict'

/**
 * New Relic agent configuration for Asset Management System
 * 
 * See lib/config/default.js in the agent distribution for a more complete
 * description of configuration variables and their potential values.
 */
exports.config = {
  /**
   * Array of application names.
   */
  app_name: [process.env.NEW_RELIC_APP_NAME || 'AMS-Backend'],
  
  /**
   * Your New Relic license key.
   */
  license_key: process.env.NEW_RELIC_LICENSE_KEY,
  
  /**
   * This setting controls distributed tracing.
   * Distributed tracing lets you see the path that a request takes through your
   * distributed system. Enabling distributed tracing changes the behavior of some
   * New Relic features, so carefully consult the transition guide before you enable
   * this feature: https://docs.newrelic.com/docs/transition-guide-distributed-tracing
   * Default is true.
   */
  distributed_tracing: {
    /**
     * Enables/disables distributed tracing.
     *
     * @env NEW_RELIC_DISTRIBUTED_TRACING_ENABLED
     */
    enabled: true
  },
  
  /**
   * Logging configuration
   */
  logging: {
    /**
     * Level at which to log. 'trace' is most useful to New Relic when diagnosing
     * issues with the agent, 'info' and higher will impose the least overhead on
     * production applications.
     */
    level: process.env.NEW_RELIC_LOG_LEVEL || 'info',
    
    /**
     * Where to put the log file -- by default just uses process.stdout so that
     * logs appear in your application's normal log stream.
     */
    filepath: process.env.NEW_RELIC_LOG_FILE || 'stdout'
  },
  
  /**
   * When true, all request headers except for those listed in attributes.exclude
   * will be captured for all traces, unless otherwise specified in a destination's
   * attributes include/exclude lists.
   */
  allow_all_headers: true,
  
  /**
   * Attributes configuration
   */
  attributes: {
    /**
     * Prefix of attributes to exclude from all destinations. Allows * as wildcard
     * at end of string.
     */
    exclude: [
      'request.headers.cookie',
      'request.headers.authorization',
      'request.headers.proxyAuthorization',
      'request.headers.setCookie*',
      'request.headers.x*',
      'response.headers.cookie',
      'response.headers.authorization',
      'response.headers.proxyAuthorization',
      'response.headers.setCookie*'
    ]
  },
  
  /**
   * Transaction tracer configuration
   */
  transaction_tracer: {
    /**
     * Enable capture of memcache keys.
     */
    enabled: true,
    
    /**
     * Threshold in milliseconds. When the response time of a web transaction
     * exceeds this threshold, a transaction trace will be recorded.
     */
    transaction_threshold: process.env.NEW_RELIC_TRACER_THRESHOLD || 'apdex_f',
    
    /**
     * Maximum number of transaction trace nodes to record in a single transaction.
     */
    top_n: 20
  },
  
  /**
   * Error collector configuration
   */
  error_collector: {
    /**
     * Disabling the error collector removes this feature entirely.
     */
    enabled: true,
    
    /**
     * List of HTTP error status codes the error collector should ignore.
     */
    ignore_status_codes: [401, 404]
  },
  
  /**
   * Browser Monitoring configuration
   */
  browser_monitoring: {
    /**
     * Enable browser monitoring header generation.
     * This does not auto-instrument, just makes the headers available.
     */
    enable: true
  },
  
  /**
   * Application logging configuration
   */
  application_logging: {
    /**
     * Enables/disables the capture of logs generated by your application.
     */
    enabled: true,
    
    /**
     * Enables/disables the capture of logs generated by your application
     * and forwards them to New Relic.
     */
    forwarding: {
      enabled: true,
      
      /**
       * Sets the maximum number of log records to send per minute.
       */
      max_samples_stored: 10000
    },
    
    /**
     * Enables/disables the decoration of logs written to disk with linking metadata.
     */
    local_decorating: {
      enabled: false
    }
  },
  
  /**
   * Rules for naming or ignoring transactions.
   */
  rules: {
    /**
     * A list of rules for renaming transactions.
     */
    name: [
      // Rename health check endpoint
      { pattern: '/api/health', name: '/api/health' },
      // Group asset operations
      { pattern: '/api/assets/*', name: '/api/assets/*' },
      // Group maintenance operations  
      { pattern: '/api/maintenance/*', name: '/api/maintenance/*' },
      // Group coverage operations
      { pattern: '/api/coverage/*', name: '/api/coverage/*' },
      // Group repair operations
      { pattern: '/api/repairs/*', name: '/api/repairs/*' },
      // Group dashboard operations
      { pattern: '/api/dashboard/*', name: '/api/dashboard/*' }
    ],
    
    /**
     * A list of patterns for transactions to ignore entirely.
     */
    ignore: [
      // Ignore static file requests
      '/uploads/*',
      // Ignore favicon requests
      '/favicon.ico'
    ]
  }
}
