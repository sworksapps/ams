version: 0.2

env:
  shell: bash
  secrets-manager:
    MYSQL_HOST: $SECRET/AMS:MYSQL_HOST
    MYSQL_USER: $SECRET/AMS:MYSQL_USER
    MYSQL_DB: $SECRET/AMS:MYSQL_DB
    MYSQL_PASSWORD: $SECRET/AMS:MYSQL_PASSWORD
    SONAR_TOKEN: $SECRET/AMS:SONAR_TOKEN
    SONAR_HOST: $SECRET/AMS:SONAR_HOST

phases:
  install:
    commands:
      - echo "Installing dependencies..."
      - curl -sL https://rpm.nodesource.com/setup_18.x | sudo -E bash -
      - yum install -y nodejs unzip jq docker
      - pip3 install -q awscli boto3 --upgrade --user
      - export SONAR_SCANNER_VERSION="6.2.1.4610"
      - wget -qO /tmp/sonar-scanner.zip "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux-x64.zip"
      - unzip -q /tmp/sonar-scanner.zip -d /tmp
      - /tmp/sonar-scanner-${SONAR_SCANNER_VERSION}-linux-x64/bin/sonar-scanner --version

  pre_build:
    commands:
      - echo "Setting up environment variables..."
      - APP_NAME="ams-${ENV_NAME}"
      - export APP_NAME
      - export SONAR_PROJECT_KEY=$APP_NAME
      - export NEW_RELIC_APPNAME=$APP_NAME
      - export ENV_NAME=$ENV_NAME

      - echo "Validating required variables..."
      - if [ -z "$SONAR_HOST" ] || [ -z "$SONAR_TOKEN" ]; then echo "Missing SONAR_HOST or SONAR_TOKEN"; exit 1; fi

      - echo "Generating sonar-project.properties file..."
      - |
        cat <<EOF > sonar-project.properties
        sonar.projectKey=${APP_NAME}
        sonar.projectName=${APP_NAME}
        sonar.projectBaseDir=$(pwd)
        sonar.projectVersion=1.0
        sonar.scm.disabled=true
        sonar.javascript.nodejs.executable=/usr/bin/node
        sonar.javascript.detectBundles=false
        sonar.coverage.jacoco.xmlReportPaths=
        sonar.java.coveragePlugin=none
        sonar.sources=.
        sonar.sourceEncoding=UTF-8
        sonar.host.url=${SONAR_HOST}
        sonar.login=${SONAR_TOKEN}
        EOF

      - echo "Running SonarQube scan..."
      - /tmp/sonar-scanner-${SONAR_SCANNER_VERSION}-linux-x64/bin/sonar-scanner

      - echo "Checking SonarQube quality gate status..."
      - |
        for i in {1..10}; do
          curl -s -u "${SONAR_TOKEN}:" "${SONAR_HOST}/api/qualitygates/project_status?projectKey=${SONAR_PROJECT_KEY}" > /tmp/result.json
          if [ "$(jq -r '.projectStatus.status' /tmp/result.json)" != "ERROR" ]; then
            break
          fi
          echo "Waiting for SonarQube quality gate check... ($i)"
          sleep 10
        done
      - |
        if [ "$(jq -r '.projectStatus.status' /tmp/result.json)" = "ERROR" ]; then
          echo "Quality gate failed."
          exit 1
        fi
      - echo "SonarQube scan completed successfully."

      - echo "Setting up Docker variables..."
      - REPOSITORY_URI=919795083283.dkr.ecr.ap-south-1.amazonaws.com/$APP_NAME
      - echo "REPOSITORY_URI=$REPOSITORY_URI"

      - echo "Updating configuration files with environment variables using sed..."
      - |
        sed -i 's/ENV_NAME/'"${ENV_NAME}"'/g' $CODEBUILD_SRC_DIR/Dockerfile
        sed -i 's/ENV_MYSQL_PASSWORD/'"${MYSQL_PASSWORD}"'/g' $CODEBUILD_SRC_DIR/.env.${ENV_NAME}
        sed -i 's/ENV_MYSQL_HOST/'"${MYSQL_HOST}"'/g' $CODEBUILD_SRC_DIR/.env.${ENV_NAME}
        sed -i 's/ENV_MYSQL_USER/'"${MYSQL_USER}"'/g' $CODEBUILD_SRC_DIR/.env.${ENV_NAME}
        sed -i 's/ENV_MYSQL_DB/'"${MYSQL_DB}"'/g' $CODEBUILD_SRC_DIR/.env.${ENV_NAME}

  build:
    commands:
      - echo "Building Docker image..."
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin 919795083283.dkr.ecr.$AWS_REGION.amazonaws.com
      - docker build --build-arg NEW_RELIC_LICENSE_KEY=$RELIC_LICENCE_KEY --build-arg NEW_RELIC_APPNAME=$NEW_RELIC_APPNAME -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$APP_NAME-$COMMIT_HASH

  post_build:
    commands:
      - echo "Pushing Docker image..."
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$APP_NAME-$COMMIT_HASH
      - echo "Writing image definitions..."
      - printf '[{"name":"ams-%s","imageUri":"%s"}]' $ENV_NAME $REPOSITORY_URI:latest > imagedefinitions.json
      - cat imagedefinitions.json

artifacts:
  files:
    - imagedefinitions.json